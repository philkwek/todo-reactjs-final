{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Documents/Coding Projects/todo-webapp/todo-reactjs/src/components/TaskItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport $ from 'jquery';\nimport '../index.css';\nimport Fade from 'react-reveal/Fade';\nimport { CheckIcon, CogIcon } from '@heroicons/react/solid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst btnStates = [/*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"w-5 h-5 rounded-full border-2 border-gray-500\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 5\n}, this),\n/*#__PURE__*/\n//undone task\n_jsxDEV(CogIcon, {\n  className: \"w-5 h-5 text-white bg-yellow-400 rounded-full\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 5\n}, this),\n/*#__PURE__*/\n//in-progress task\n_jsxDEV(CheckIcon, {\n  className: \"w-5 h-5 text-white bg-green-700 rounded-full\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 10,\n  columnNumber: 5\n}, this) //done task\n];\n\nconst TaskItem = props => {\n  _s();\n\n  const firstRender = useRef(false);\n  const [closeBtnState, setCloseBtnState] = useState('');\n  const [taskBtnState, setTaskBtnState] = useState(btnStates[props.taskStatus]);\n  const [taskStatusNo, setTaskStatusNo] = useState(props.taskStatus); // const TaskCheckHandler = (event) => { //checks task as done or undone (old)\n  //     setTaskStatus(event.target.checked); \n  //     const taskCheckData = {\n  //         taskId: props.taskId,\n  //         taskDone: event.target.checked\n  //     };\n  //     props.onTaskChecked(taskCheckData);\n  // };\n\n  const SetCurrentStatus = status => {\n    setTaskStatusNo(status);\n  };\n\n  const ChangeStatusHandler = () => {\n    if (taskStatusNo === 0) {\n      setTaskBtnState( /*#__PURE__*/_jsxDEV(CogIcon, {\n        className: \"w-5 h-5 text-white bg-yellow-400 rounded-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 29\n      }, this));\n      setTaskStatusNo(1);\n    } else if (taskStatusNo === 1) {\n      setTaskBtnState( /*#__PURE__*/_jsxDEV(CheckIcon, {\n        className: \"w-5 h-5 text-white bg-green-700 rounded-full\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 29\n      }, this));\n      setTaskStatusNo(2);\n    } else if (taskStatusNo === 2) {\n      setTaskBtnState( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-5 h-5 rounded-full border-2 border-gray-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 29\n      }, this));\n      setTaskStatusNo(0);\n    }\n  };\n\n  useEffect(() => {\n    if (firstRender.current) {\n      const taskCheckData = {\n        taskId: props.taskId,\n        taskDone: taskStatusNo\n      };\n      props.onTaskChecked(taskCheckData);\n    } else {\n      firstRender.current = true;\n    }\n  }, [props, taskStatusNo]);\n\n  const DeleteTaskHandler = () => {\n    //deletes task from client by passing taskId to be deleted\n    props.onTaskDelete(props.taskId);\n  };\n\n  const ToggleDeleteButton = () => {\n    //toggles delete todo button\n    if (closeBtnState === '') {\n      setCloseBtnState( /*#__PURE__*/_jsxDEV(Fade, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: DeleteTaskHandler,\n          type: \"button\",\n          className: \"bg-white rounded-full items-center justify-center text-gray-500 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-500\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sr-only\",\n            children: \"Close menu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"h-4 w-4\",\n            xmlns: \"http://www.w3.org/2000/svg\",\n            fill: \"none\",\n            viewBox: \"0 0 24 24\",\n            stroke: \"currentColor\",\n            \"aria-hidden\": \"true\",\n            children: /*#__PURE__*/_jsxDEV(\"path\", {\n              strokeLinecap: \"round\",\n              strokeLinejoin: \"round\",\n              strokeWidth: \"2\",\n              d: \"M6 18L18 6M6 6l12 12\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this));\n    } else {\n      setCloseBtnState('');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fade, {\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      id: props.taskId,\n      onDoubleClick: ToggleDeleteButton,\n      className: \"flex flex-row items-center mb-5 w-full select-none\",\n      children: [closeBtnState, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: ChangeStatusHandler,\n        className: \"w-5 h-5 rounded-full focus:ring-2 ml-3\",\n        children: taskBtnState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ml-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-base font-medium\",\n          children: props.taskName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-500\",\n          children: props.taskDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskItem, \"lc6if36/RyEjTIQf/CfQXED20Cc=\");\n\n_c = TaskItem;\nexport default TaskItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"sources":["/Users/Phil/Documents/Coding Projects/todo-webapp/todo-reactjs/src/components/TaskItem.js"],"names":["React","useState","useEffect","useRef","$","Fade","CheckIcon","CogIcon","btnStates","TaskItem","props","firstRender","closeBtnState","setCloseBtnState","taskBtnState","setTaskBtnState","taskStatus","taskStatusNo","setTaskStatusNo","SetCurrentStatus","status","ChangeStatusHandler","current","taskCheckData","taskId","taskDone","onTaskChecked","DeleteTaskHandler","onTaskDelete","ToggleDeleteButton","taskName","taskDescription"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,cAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAAQC,SAAR,EAAmBC,OAAnB,QAAiC,wBAAjC;;AAEA,MAAMC,SAAS,GAAG,cACd;AAAK,EAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,QADc;AAAA;AACyD;AACvE,QAAC,OAAD;AAAS,EAAA,SAAS,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,QAFc;AAAA;AAEwD;AACtE,QAAC,SAAD;AAAW,EAAA,SAAS,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,QAHc,CAGyD;AAHzD,CAAlB;;AAMA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAMC,WAAW,GAAGR,MAAM,CAAC,KAAD,CAA1B;AAEA,QAAM,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAACO,SAAS,CAACE,KAAK,CAACM,UAAP,CAAV,CAAhD;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAACS,KAAK,CAACM,UAAP,CAAhD,CALwB,CAOxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMG,gBAAgB,GAAIC,MAAD,IAAY;AACjCF,IAAAA,eAAe,CAACE,MAAD,CAAf;AACH,GAFD;;AAIA,QAAMC,mBAAmB,GAAG,MAAM;AAC9B,QAAIJ,YAAY,KAAK,CAArB,EAAuB;AACnBF,MAAAA,eAAe,eAAC,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,cAAD,CAAf;AACAG,MAAAA,eAAe,CAAC,CAAD,CAAf;AAEH,KAJD,MAIO,IAAID,YAAY,KAAK,CAArB,EAAuB;AAC1BF,MAAAA,eAAe,eAAC,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,cAAD,CAAf;AACAG,MAAAA,eAAe,CAAC,CAAD,CAAf;AAEH,KAJM,MAIA,IAAID,YAAY,KAAK,CAArB,EAAuB;AAC1BF,MAAAA,eAAe,eAAC;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAAD,CAAf;AACAG,MAAAA,eAAe,CAAC,CAAD,CAAf;AACH;AACJ,GAbD;;AAeAhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,WAAW,CAACW,OAAhB,EAAwB;AACpB,YAAMC,aAAa,GAAG;AAClBC,QAAAA,MAAM,EAAEd,KAAK,CAACc,MADI;AAElBC,QAAAA,QAAQ,EAAER;AAFQ,OAAtB;AAIAP,MAAAA,KAAK,CAACgB,aAAN,CAAoBH,aAApB;AACH,KAND,MAMO;AACHZ,MAAAA,WAAW,CAACW,OAAZ,GAAsB,IAAtB;AACH;AACJ,GAVQ,EAUN,CAACZ,KAAD,EAAQO,YAAR,CAVM,CAAT;;AAYA,QAAMU,iBAAiB,GAAG,MAAM;AAAE;AAC9BjB,IAAAA,KAAK,CAACkB,YAAN,CAAmBlB,KAAK,CAACc,MAAzB;AACH,GAFD;;AAIA,QAAMK,kBAAkB,GAAG,MAAM;AAAE;AAC/B,QAAGjB,aAAa,KAAK,EAArB,EAAwB;AACpBC,MAAAA,gBAAgB,eACZ,QAAC,IAAD;AAAA,+BACI;AAAQ,UAAA,OAAO,EAAEc,iBAAjB;AAAoC,UAAA,IAAI,EAAC,QAAzC;AAAkD,UAAA,SAAS,EAAC,2JAA5D;AAAA,kCACI;AAAM,YAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAC,SAAf;AAAyB,YAAA,KAAK,EAAC,4BAA/B;AAA4D,YAAA,IAAI,EAAC,MAAjE;AAAwE,YAAA,OAAO,EAAC,WAAhF;AAA4F,YAAA,MAAM,EAAC,cAAnG;AAAkH,2BAAY,MAA9H;AAAA,mCACI;AAAM,cAAA,aAAa,EAAC,OAApB;AAA4B,cAAA,cAAc,EAAC,OAA3C;AAAmD,cAAA,WAAW,EAAC,GAA/D;AAAmE,cAAA,CAAC,EAAC;AAArE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADY,CAAhB;AAUH,KAXD,MAWO;AACHd,MAAAA,gBAAgB,CAAC,EAAD,CAAhB;AACH;AACJ,GAfD;;AAiBA,sBACI,QAAC,IAAD;AAAA,2BACI;AAAI,MAAA,EAAE,EAAEH,KAAK,CAACc,MAAd;AAAsB,MAAA,aAAa,EAAEK,kBAArC;AAAyD,MAAA,SAAS,EAAC,oDAAnE;AAAA,iBACKjB,aADL,eAEI;AAAQ,QAAA,OAAO,EAAES,mBAAjB;AAAsC,QAAA,SAAS,EAAC,wCAAhD;AAAA,kBACKP;AADL;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACI;AAAG,UAAA,SAAS,EAAC,uBAAb;AAAA,oBAAsCJ,KAAK,CAACoB;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAG,UAAA,SAAS,EAAC,uBAAb;AAAA,oBAAsCpB,KAAK,CAACqB;AAA5C;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CAlFD;;GAAMtB,Q;;KAAAA,Q;AAoFN,eAAeA,QAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport $ from 'jquery';\nimport '../index.css';\nimport Fade from 'react-reveal/Fade';\nimport {CheckIcon, CogIcon} from '@heroicons/react/solid'\n\nconst btnStates = [\n    <div className=\"w-5 h-5 rounded-full border-2 border-gray-500\"></div>, //undone task\n    <CogIcon className=\"w-5 h-5 text-white bg-yellow-400 rounded-full\"/>, //in-progress task\n    <CheckIcon className=\"w-5 h-5 text-white bg-green-700 rounded-full\"/>  //done task\n]\n\nconst TaskItem = (props) => {\n    const firstRender = useRef(false);\n\n    const [closeBtnState, setCloseBtnState] = useState('');\n    const [taskBtnState, setTaskBtnState] = useState(btnStates[props.taskStatus])\n    const [taskStatusNo, setTaskStatusNo] = useState(props.taskStatus);\n\n    // const TaskCheckHandler = (event) => { //checks task as done or undone (old)\n    //     setTaskStatus(event.target.checked); \n    //     const taskCheckData = {\n    //         taskId: props.taskId,\n    //         taskDone: event.target.checked\n    //     };\n    //     props.onTaskChecked(taskCheckData);\n    // };\n\n    const SetCurrentStatus = (status) => {\n        setTaskStatusNo(status)\n    };\n\n    const ChangeStatusHandler = () => {\n        if (taskStatusNo === 0){\n            setTaskBtnState(<CogIcon className=\"w-5 h-5 text-white bg-yellow-400 rounded-full\"/>);\n            setTaskStatusNo(1);\n\n        } else if (taskStatusNo === 1){\n            setTaskBtnState(<CheckIcon className=\"w-5 h-5 text-white bg-green-700 rounded-full\"/>);\n            setTaskStatusNo(2);\n\n        } else if (taskStatusNo === 2){\n            setTaskBtnState(<div className=\"w-5 h-5 rounded-full border-2 border-gray-500\"></div>);\n            setTaskStatusNo(0);\n        }\n    }\n\n    useEffect(() => {\n        if (firstRender.current){\n            const taskCheckData = {\n                taskId: props.taskId,\n                taskDone: taskStatusNo\n            };\n            props.onTaskChecked(taskCheckData);\n        } else {\n            firstRender.current = true;\n        }\n    }, [props, taskStatusNo]);\n\n    const DeleteTaskHandler = () => { //deletes task from client by passing taskId to be deleted\n        props.onTaskDelete(props.taskId);\n    };\n\n    const ToggleDeleteButton = () => { //toggles delete todo button\n        if(closeBtnState === ''){\n            setCloseBtnState(\n                <Fade>\n                    <button onClick={DeleteTaskHandler} type=\"button\" className=\"bg-white rounded-full items-center justify-center text-gray-500 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-500\">\n                        <span className=\"sr-only\">Close menu</span>\n                        <svg className=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                        </svg>\n                    </button>\n                </Fade>\n            )\n        } else {\n            setCloseBtnState('');\n        }\n    }\n\n    return (\n        <Fade>\n            <li id={props.taskId} onDoubleClick={ToggleDeleteButton} className=\"flex flex-row items-center mb-5 w-full select-none\">\n                {closeBtnState}\n                <button onClick={ChangeStatusHandler} className=\"w-5 h-5 rounded-full focus:ring-2 ml-3\">\n                    {taskBtnState}\n                </button>\n                <div className=\"ml-3\">\n                    <p className=\"text-base font-medium\">{props.taskName}</p>\n                    <p className=\"text-xs text-gray-500\">{props.taskDescription}</p>\n                </div>\n            </li>\n        </Fade>\n    );\n}\n\nexport default TaskItem;"]},"metadata":{},"sourceType":"module"}