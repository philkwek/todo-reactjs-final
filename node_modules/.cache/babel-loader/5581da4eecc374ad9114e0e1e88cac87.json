{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Documents/Coding Projects/todo-webapp/todo-reactjs/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport $ from 'jquery';\nimport './index.css';\nimport TaskDisplay from './components/TaskDisplay.js';\nimport TaskInput from './components/TaskInput.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testData = [{\n  \"id\": \"4cvQmibYdm1mN8A4uifT\",\n  \"userId\": \"HYOePPQ2ZVo1P0G7lch0\",\n  \"taskDescription\": \"\",\n  \"taskName\": \"Plan Event\",\n  \"taskStatus\": \"none\"\n}, {\n  \"id\": \"SogFb3AqceHpC75jXhS2\",\n  \"userId\": \"otherId\",\n  \"taskStatus\": \"in-progress\",\n  \"taskName\": \"Get Groceries\",\n  \"taskDescription\": \"get milk, eggs, flour and sugar for baking\"\n}, {\n  \"id\": \"mp0blgkCxnpKS3zXYQUr\",\n  \"taskDescription\": \"Matthew 5\",\n  \"userId\": \"testing\",\n  \"taskStatus\": \"testing\",\n  \"taskName\": \"Read Bible\"\n}, {\n  \"id\": \"pYEe0XRKgOIvAZbQAqP7\",\n  \"taskStatus\": \"in-progress\",\n  \"taskName\": \"Finish Coding Project\",\n  \"userId\": \"HYOePPQ2ZVo1P0G7lch0\",\n  \"taskDescription\": \"\"\n}, {\n  \"id\": \"y16JDui5yWMmJXvhTTmU\",\n  \"taskDescription\": \"Testing123\",\n  \"taskName\": \"Testing\",\n  \"taskStatus\": \"testing\",\n  \"userId\": \"testing\"\n}];\n\nfunction App() {\n  _s();\n\n  const [newTask, setNewTask] = useState('');\n  const [allTasks, setAllTasks] = useState(testData); // if (allTasks == ''){\n  //   $.get(\"https://us-central1-task-manager-api-4f9a8.cloudfunctions.net/tasks\", function(data, status){\n  //     const tasks = JSON.parse(data);\n  //     setAllTasks(tasks);\n  //   });\n  // };\n\n  const closeTaskHandler = () => {\n    setNewTask();\n  };\n\n  const saveTaskHandler = event => {\n    const taskData = event; //save to cloud\n\n    setAllTasks(prevState => {\n      return [taskData, ...prevState];\n    });\n    closeTaskHandler();\n  };\n\n  const newTaskHandler = () => {\n    setNewTask( /*#__PURE__*/_jsxDEV(TaskInput, {\n      closeNewTask: closeTaskHandler,\n      onSaveTask: saveTaskHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 16\n    }, this));\n  };\n\n  const taskCheckedHandler = event => {\n    //finish task handler\n    console.log(\"Task \" + event.taskId + \" is currently \" + event.taskDone);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-1 gap-4 m-5 justify-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold font-sans\",\n        children: \"My Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskDisplay, {\n      tasks: allTasks,\n      onTaskChecked: taskCheckedHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), newTask, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed right-5 bottom-5\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newTaskHandler,\n        className: \"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full\",\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"+zvVZqM8bVYFdyFLUuoqQs6AUW0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Phil/Documents/Coding Projects/todo-webapp/todo-reactjs/src/App.js"],"names":["React","useState","$","TaskDisplay","TaskInput","testData","App","newTask","setNewTask","allTasks","setAllTasks","closeTaskHandler","saveTaskHandler","event","taskData","prevState","newTaskHandler","taskCheckedHandler","console","log","taskId","taskDone"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAO,aAAP;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,OAAOC,SAAP,MAAsB,2BAAtB;;AAEA,MAAMC,QAAQ,GAAG,CACf;AACI,QAAM,sBADV;AAEI,YAAU,sBAFd;AAGI,qBAAmB,EAHvB;AAII,cAAY,YAJhB;AAKI,gBAAc;AALlB,CADe,EAQf;AACI,QAAM,sBADV;AAEI,YAAU,SAFd;AAGI,gBAAc,aAHlB;AAII,cAAY,eAJhB;AAKI,qBAAmB;AALvB,CARe,EAef;AACI,QAAM,sBADV;AAEI,qBAAmB,WAFvB;AAGI,YAAU,SAHd;AAII,gBAAc,SAJlB;AAKI,cAAY;AALhB,CAfe,EAsBf;AACI,QAAM,sBADV;AAEI,gBAAc,aAFlB;AAGI,cAAY,uBAHhB;AAII,YAAU,sBAJd;AAKI,qBAAmB;AALvB,CAtBe,EA6Bf;AACI,QAAM,sBADV;AAEI,qBAAmB,YAFvB;AAGI,cAAY,SAHhB;AAII,gBAAc,SAJlB;AAKI,YAAU;AALd,CA7Be,CAAjB;;AAsCA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACI,QAAD,CAAxC,CAFa,CAIb;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMM,gBAAgB,GAAG,MAAM;AAC7BH,IAAAA,UAAU;AACX,GAFD;;AAIA,QAAMI,eAAe,GAAIC,KAAD,IAAW;AACjC,UAAMC,QAAQ,GAAGD,KAAjB,CADiC,CAEjC;;AACAH,IAAAA,WAAW,CAAEK,SAAD,IAAe;AACzB,aAAO,CAACD,QAAD,EAAW,GAAGC,SAAd,CAAP;AACD,KAFU,CAAX;AAGAJ,IAAAA,gBAAgB;AACjB,GAPD;;AASA,QAAMK,cAAc,GAAG,MAAM;AAC3BR,IAAAA,UAAU,eAAC,QAAC,SAAD;AAAW,MAAA,YAAY,EAAEG,gBAAzB;AAA2C,MAAA,UAAU,EAAEC;AAAvD;AAAA;AAAA;AAAA;AAAA,YAAD,CAAV;AACD,GAFD;;AAIA,QAAMK,kBAAkB,GAAIJ,KAAD,IAAW;AACpC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAUN,KAAK,CAACO,MAAhB,GAAyB,gBAAzB,GAA4CP,KAAK,CAACQ,QAA9D;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,2CAAf;AAAA,4BACE;AAAA,6BAAK;AAAI,QAAA,SAAS,EAAC,8BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEZ,QAApB;AAA8B,MAAA,aAAa,EAAEQ;AAA7C;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGV,OAHH,eAKE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACE;AACA,QAAA,OAAO,EAAES,cADT;AAEA,QAAA,SAAS,EAAC,2EAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA/CQV,G;;KAAAA,G;AAiDT,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport $ from 'jquery';\nimport './index.css';\nimport TaskDisplay from './components/TaskDisplay.js'\nimport TaskInput from './components/TaskInput.js';\n\nconst testData = [\n  {\n      \"id\": \"4cvQmibYdm1mN8A4uifT\",\n      \"userId\": \"HYOePPQ2ZVo1P0G7lch0\",\n      \"taskDescription\": \"\",\n      \"taskName\": \"Plan Event\",\n      \"taskStatus\": \"none\"\n  },\n  {\n      \"id\": \"SogFb3AqceHpC75jXhS2\",\n      \"userId\": \"otherId\",\n      \"taskStatus\": \"in-progress\",\n      \"taskName\": \"Get Groceries\",\n      \"taskDescription\": \"get milk, eggs, flour and sugar for baking\"\n  },\n  {\n      \"id\": \"mp0blgkCxnpKS3zXYQUr\",\n      \"taskDescription\": \"Matthew 5\",\n      \"userId\": \"testing\",\n      \"taskStatus\": \"testing\",\n      \"taskName\": \"Read Bible\"\n  },\n  {\n      \"id\": \"pYEe0XRKgOIvAZbQAqP7\",\n      \"taskStatus\": \"in-progress\",\n      \"taskName\": \"Finish Coding Project\",\n      \"userId\": \"HYOePPQ2ZVo1P0G7lch0\",\n      \"taskDescription\": \"\"\n  },\n  {\n      \"id\": \"y16JDui5yWMmJXvhTTmU\",\n      \"taskDescription\": \"Testing123\",\n      \"taskName\": \"Testing\",\n      \"taskStatus\": \"testing\",\n      \"userId\": \"testing\"\n  }\n]\n\nfunction App() {\n  const [newTask, setNewTask] = useState('');\n  const [allTasks, setAllTasks] = useState(testData);\n\n  // if (allTasks == ''){\n  //   $.get(\"https://us-central1-task-manager-api-4f9a8.cloudfunctions.net/tasks\", function(data, status){\n  //     const tasks = JSON.parse(data);\n  //     setAllTasks(tasks);\n  //   });\n  // };\n\n  const closeTaskHandler = () => {\n    setNewTask();\n  }\n\n  const saveTaskHandler = (event) => {\n    const taskData = event;\n    //save to cloud\n    setAllTasks((prevState) => {\n      return [taskData, ...prevState]\n    });\n    closeTaskHandler();\n  };\n\n  const newTaskHandler = () => {\n    setNewTask(<TaskInput closeNewTask={closeTaskHandler} onSaveTask={saveTaskHandler}/>)\n  };\n\n  const taskCheckedHandler = (event) => {\n    //finish task handler\n    console.log(\"Task \" + event.taskId + \" is currently \" + event.taskDone);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 gap-4 m-5 justify-center\">\n      <div><h1 className=\"text-3xl font-bold font-sans\">My Tasks</h1></div>\n      <TaskDisplay tasks={allTasks} onTaskChecked={taskCheckedHandler}></TaskDisplay>\n      {newTask}\n\n      <div className=\"fixed right-5 bottom-5\">\n        <button \n        onClick={newTaskHandler}\n        className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full\">+\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}