{"ast":null,"code":"var _jsxFileName = \"/Users/Phil/Documents/Coding Projects/todo-webapp/todo-reactjs/src/components/TaskItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../index.css';\nimport Fade from 'react-reveal/Fade';\nimport { CheckIcon, CogIcon } from '@heroicons/react/solid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst btnStates = [/*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"w-5 h-5 rounded-full border-2 border-gray-500\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 5\n}, this),\n/*#__PURE__*/\n//undone task\n_jsxDEV(CogIcon, {\n  className: \"w-5 h-5 text-white bg-yellow-400 rounded-full\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 5\n}, this),\n/*#__PURE__*/\n//in-progress task\n_jsxDEV(CheckIcon, {\n  className: \"w-5 h-5 text-white bg-green-700 rounded-full\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 5\n}, this) //done task\n];\n\nconst TaskItem = props => {\n  _s();\n\n  const firstRender = useRef(false);\n  const [taskMenuState, setTaskMenuState] = useState('');\n  const [taskBtnState, setTaskBtnState] = useState(btnStates[props.taskStatus]);\n  const [taskStatusNo, setTaskStatusNo] = useState(props.taskStatus);\n  const [taskPriority, setTaskPriority] = useState(props.taskPriority);\n\n  const ChangeStatusHandler = () => {\n    if (taskStatusNo == 0) {\n      setTaskBtnState(btnStates[1]);\n      setTaskStatusNo(1);\n    } else if (taskStatusNo == 1) {\n      setTaskBtnState(btnStates[2]);\n      setTaskStatusNo(2);\n    } else if (taskStatusNo == 2) {\n      setTaskBtnState(btnStates[0]);\n      setTaskStatusNo(0);\n    }\n  };\n\n  useEffect(() => {\n    if (firstRender.current) {\n      const taskCheckData = {\n        taskId: props.taskId,\n        taskDone: taskStatusNo\n      };\n      props.onTaskChecked(taskCheckData);\n    } else {\n      firstRender.current = true;\n    }\n  }, [props, taskStatusNo]);\n\n  const DeleteTaskHandler = () => {\n    //deletes task from client by passing taskId to be deleted\n    props.onTaskDelete(props.taskId);\n  };\n\n  const TaskPriorityHandler = event => {\n    setTaskPriority(event.target.value);\n  };\n\n  useEffect(() => {//updates priority value\n  }, [taskPriority]);\n\n  const ToggleTaskMenu = () => {\n    //toggles delete todo button\n    if (taskMenuState === '') {\n      setTaskMenuState( /*#__PURE__*/_jsxDEV(Fade, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-row align-middle items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"border-0 active:border-0\",\n            defaultValue: taskPriority,\n            onChange: TaskPriorityHandler,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"0\",\n              children: \"!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"1\",\n              children: \"!!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"2\",\n              children: \"!!!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: DeleteTaskHandler,\n            type: \"button\",\n            className: \"ml-3 bg-white rounded-full items-center justify-center  text-gray-500 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-500 w-4 h-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"sr-only\",\n              children: \"Close menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n              className: \"h-4 w-4\",\n              xmlns: \"http://www.w3.org/2000/svg\",\n              fill: \"none\",\n              viewBox: \"0 0 24 24\",\n              stroke: \"currentColor\",\n              \"aria-hidden\": \"true\",\n              children: /*#__PURE__*/_jsxDEV(\"path\", {\n                strokeLinecap: \"round\",\n                strokeLinejoin: \"round\",\n                strokeWidth: \"2\",\n                d: \"M6 18L18 6M6 6l12 12\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this));\n    } else {\n      setTaskMenuState(''); //update priority if there is a change \n\n      if (taskPriority != props.taskPriority) {\n        const data = {\n          taskPriority: taskPriority,\n          taskId: props.taskId,\n          taskDescription: props.taskDescription,\n          taskName: props.taskName,\n          taskStatus: taskStatusNo\n        }; //updates server\n        //updates client\n\n        props.onPriorityUpdate(data);\n      }\n\n      ;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fade, {\n    children: /*#__PURE__*/_jsxDEV(\"li\", {\n      id: props.taskId,\n      onDoubleClick: ToggleTaskMenu,\n      className: \"flex flex-row items-center mb-5 w-full select-none\",\n      children: [taskMenuState, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: ChangeStatusHandler,\n        className: \"w-5 h-5 rounded-full focus:ring-2 ml-3\",\n        children: taskBtnState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ml-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-base font-medium\",\n          children: props.taskName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-500\",\n          children: props.taskDescription\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TaskItem, \"0QiSO3pvoDi5fU4B53g3x2080hE=\");\n\n_c = TaskItem;\nexport default TaskItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskItem\");","map":{"version":3,"sources":["/Users/Phil/Documents/Coding Projects/todo-webapp/todo-reactjs/src/components/TaskItem.js"],"names":["React","useState","useEffect","useRef","Fade","CheckIcon","CogIcon","btnStates","TaskItem","props","firstRender","taskMenuState","setTaskMenuState","taskBtnState","setTaskBtnState","taskStatus","taskStatusNo","setTaskStatusNo","taskPriority","setTaskPriority","ChangeStatusHandler","current","taskCheckData","taskId","taskDone","onTaskChecked","DeleteTaskHandler","onTaskDelete","TaskPriorityHandler","event","target","value","ToggleTaskMenu","data","taskDescription","taskName","onPriorityUpdate"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport '../index.css';\nimport Fade from 'react-reveal/Fade';\nimport {CheckIcon, CogIcon} from '@heroicons/react/solid'\n\nconst btnStates = [\n    <div className=\"w-5 h-5 rounded-full border-2 border-gray-500\"></div>, //undone task\n    <CogIcon className=\"w-5 h-5 text-white bg-yellow-400 rounded-full\"/>, //in-progress task\n    <CheckIcon className=\"w-5 h-5 text-white bg-green-700 rounded-full\"/>  //done task\n]\n\nconst TaskItem = (props) => {\n    const firstRender = useRef(false);\n\n    const [taskMenuState, setTaskMenuState] = useState('');\n    const [taskBtnState, setTaskBtnState] = useState(btnStates[props.taskStatus])\n    \n    const [taskStatusNo, setTaskStatusNo] = useState(props.taskStatus);\n    const [taskPriority, setTaskPriority] = useState(props.taskPriority);\n\n    const ChangeStatusHandler = () => {\n        if (taskStatusNo == 0){\n            setTaskBtnState(btnStates[1]);\n            setTaskStatusNo(1);\n\n        } else if (taskStatusNo == 1){\n            setTaskBtnState(btnStates[2]);\n            setTaskStatusNo(2);\n\n        } else if (taskStatusNo == 2){\n            setTaskBtnState(btnStates[0]);\n            setTaskStatusNo(0);\n        }\n    }\n\n    useEffect(() => {\n        if (firstRender.current){\n            const taskCheckData = {\n                taskId: props.taskId,\n                taskDone: taskStatusNo\n            };\n            props.onTaskChecked(taskCheckData);\n        } else {\n            firstRender.current = true;\n        }\n    }, [props, taskStatusNo]);\n\n    const DeleteTaskHandler = () => { //deletes task from client by passing taskId to be deleted\n        props.onTaskDelete(props.taskId);\n    };\n\n    const TaskPriorityHandler = (event) => {\n        setTaskPriority(event.target.value);\n    };\n\n    useEffect(() => { //updates priority value\n\n    },[taskPriority])\n\n    const ToggleTaskMenu = () => { //toggles delete todo button\n        if(taskMenuState === ''){\n            setTaskMenuState(\n                <Fade>\n                    <div className=\"flex flex-row align-middle items-center\">\n                        <select className=\"border-0 active:border-0\" defaultValue={taskPriority} onChange={TaskPriorityHandler}>\n                            <option value=\"0\">!</option>\n                            <option value=\"1\">!!</option>\n                            <option value=\"2\">!!!</option>\n                        </select>\n                        <button onClick={DeleteTaskHandler} type=\"button\" \n                        className=\"ml-3 bg-white rounded-full items-center justify-center \n                        text-gray-500 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-500 w-4 h-4\">\n                            <span className=\"sr-only\">Close menu</span>\n                            <svg className=\"h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M6 18L18 6M6 6l12 12\" />\n                            </svg>\n                        </button>\n                    </div>\n                </Fade>\n            )\n        } else {\n            setTaskMenuState('');\n            //update priority if there is a change \n            if (taskPriority != props.taskPriority){\n                const data = {\n                    taskPriority: taskPriority,\n                    taskId: props.taskId,\n                    taskDescription: props.taskDescription,\n                    taskName: props.taskName,\n                    taskStatus: taskStatusNo\n                }\n                //updates server\n                \n                //updates client\n                props.onPriorityUpdate(data);\n            };\n        }\n    }\n\n    return (\n        <Fade>\n            <li id={props.taskId} onDoubleClick={ToggleTaskMenu} className=\"flex flex-row items-center mb-5 w-full select-none\">\n                {taskMenuState}\n                <button onClick={ChangeStatusHandler} className=\"w-5 h-5 rounded-full focus:ring-2 ml-3\">\n                    {taskBtnState}\n                </button>\n                <div className=\"ml-3\">\n                    <p className=\"text-base font-medium\">{props.taskName}</p>\n                    <p className=\"text-xs text-gray-500\">{props.taskDescription}</p>\n                </div>\n            </li>\n        </Fade>\n    );\n}\n\nexport default TaskItem;"]},"metadata":{},"sourceType":"module"}